version: "3"

volumes:
    postgres_data:
        driver: local

services:
    postgres:
        container_name: app_db
        image: postgis/postgis:14-3.1-alpine
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init:/docker-entrypoint-initdb.d
        ports:
            - "5432:5432"
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

    pgweb:
        container_name: pgweb_app
        image: sosedoff/pgweb:0.11.9
        # ports:
        #     - "8081:8081"
        environment:
            - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
        depends_on:
            - postgres
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.pgweb-app.entrypoints=https"
            - "traefik.http.routers.pgweb-app.rule=Host(`pgweb.${DOMAINNAME}`)"
            - "traefik.http.routers.pgweb-app.tls=true"
            - "traefik.http.services.pgweb-app.loadbalancer.server.port=8081"
            - "traefik.docker.network=stonehenge-network"
        networks:
            - default
            - stonehenge-network

    graphql-engine:
        container_name: hasura_app
        image: hasura/graphql-engine:v2.0.9
        # restart: unless-stopped
        # ports:
        #     - "8083:8080"
        depends_on:
            - postgres
        environment:
            ## postgres database to store Hasura metadata
            HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
            ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
            PG_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
            ## enable the console served by server
            HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
            ## enable debugging mode. It is recommended to disable this in production
            HASURA_GRAPHQL_DEV_MODE: "true"
            HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
            ## uncomment next line to set an admin secret
            # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.hasura-app.entrypoints=https"
            - "traefik.http.routers.hasura-app.rule=Host(`hasura.${DOMAINNAME}`)"
            - "traefik.http.routers.hasura-app.tls=true"
            - "traefik.http.services.hasura-app.loadbalancer.server.port=8080"
            - "traefik.docker.network=stonehenge-network"
        networks:
            - default
            - stonehenge-network

    keycloak:
        container_name: keycloak_app
        image: jboss/keycloak:15.1.0
        domainname: ${DOMAINNAME}
        environment:
            KEYCLOAK_LOGLEVEL: WARN
            DB_VENDOR: POSTGRES
            DB_ADDR: postgres
            DB_PORT: 5432
            DB_DATABASE: keycloak_db
            DB_USER: keycloak
            DB_SCHEMA: public
            DB_PASSWORD: ${POSTGRES_PASSWORD}
            KEYCLOAK_USER: admin
            KEYCLOAK_PASSWORD: adminpass
            # This is required to run keycloak behind traefik
            PROXY_ADDRESS_FORWARDING: "true"
            KEYCLOAK_HOSTNAME: auth.${DOMAINNAME}
            # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
            #JDBC_PARAMS: "ssl=true"
        # ports:
        #     - 8082:8080
        depends_on:
            - "postgres"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.keycloak-app.entrypoints=https"
            - "traefik.http.routers.keycloak-app.rule=Host(`keycloak.${DOMAINNAME}`)"
            - "traefik.http.routers.keycloak-app.tls=true"
            - "traefik.http.services.keycloak-app.loadbalancer.server.port=8080"
            - "traefik.docker.network=stonehenge-network"
        networks:
            - default
            - stonehenge-network

networks:
    # Network from druidfi/stonehenge
    stonehenge-network:
        external: true
